allprojects {
    group = 'com.thoughtworks.i1'
    version = '0.1.0-SNAPSHOT'

    apply plugin: 'java'
    apply plugin: 'idea'
}

subprojects {
    apply plugin: "war"
    apply plugin: "jetty"
    apply plugin: 'maven'

    repositories {
        mavenLocal();
        mavenCentral()
        mavenRepo url: "https://code.lds.org/nexus/content/groups/main-repo";
        mavenRepo url: "http://download.java.net/maven/2", artifactUrls: ["http://maven.springframework.org/milestone", "https://repository.jboss.org/nexus/content/groups/public/", "http://mvnrepository.com/artifact"]
    }

    sourceCompatibility = '1.7'
    // Since it's a war project, we add src/main/webapp as a resource folder
    sourceSets {
        main {
            resources {
                srcDirs += 'src/main/webapp'
            }
        }
    }

    // You could enable debug by "gradle jettyRun -Pdebug=true" or "gradle jettyRun -Pdebug"
    if(project.hasProperty("debug")){
        println "debug is enabled"
        project.ext{
            GRADLE_OPTS='-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005'
        }
    }

    if(project.name != 'i1-commons'){
        dependencies {

        }
    }

    dependencies {
        // Use guice as IOC framework
        guiceVersion="3.0"
        compile "com.google.inject.extensions:guice-persist:$guiceVersion"
        compile "com.google.inject.extensions:guice-servlet:$guiceVersion"
        compile "com.google.inject:guice:$guiceVersion"

        // Use flyway as db migration tool
        flywayVersion = '2.0.2'
        compile "com.googlecode.flyway:flyway-core:$flywayVersion"

        // Use guava and guice servlet
        def guavaVersion = '13.0.1'
        compile "com.google.guava:guava:$guavaVersion"

        // Use jersey as RESTful framework
        def jerseyVersion = '1.16'
        compile "com.sun.jersey:jersey-core:$jerseyVersion"
        compile "com.sun.jersey:jersey-server:$jerseyVersion"
        compile "com.sun.jersey:jersey-servlet:$jerseyVersion"
        compile "com.sun.jersey:jersey-json:$jerseyVersion"
        compile "com.sun.jersey.contribs:jersey-guice:$jerseyVersion"

        // Use slf4j as log framework
        def slf4jVersion = '1.7.2'
        compile "org.slf4j:slf4j-api:$slf4jVersion"
        compile "org.slf4j:slf4j-log4j12:$slf4jVersion"

        // Use fastXML as json serializer and deserializer
        def jacksonVersion = '2.1.2'
        compile "com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion"
        compile "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
        compile "com.fasterxml.jackson.core:jackson-core:$jacksonVersion"
        compile "com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:$jacksonVersion"

        compile 'javax.servlet:javax.servlet-api:3.0.1'
        // Use javax validation: JSR303
        compile 'javax.validation:validation-api:1.0.0.GA'
        // Use javax persistence: JSR317
        compile 'javax.persistence:persistence-api:1.0.2'
        // Use JSR305
        compile 'com.google.code.findbugs:jsr305:2.0.1'

        // Use jetty DefaultServlet
        compile "org.eclipse.jetty:jetty-servlet:9.0.0.M3"

        // Use embedded H2 database
        compile 'com.h2database:h2:1.3.170'

        // Use JUnit/Mockito/Hamcrest as test and mock framework
        def junitVersion = '4.10'
        testCompile "junit:junit:$junitVersion"
        def mockitoVersion = '1.9.5-rc1'
        testCompile "org.mockito:mockito-all:$mockitoVersion"
        def hamCrestVersion = '1.1'
        testCompile "org.hamcrest:hamcrest-all:$hamCrestVersion"
        // Use Jersey client as API test tool
        testCompile "com.sun.jersey:jersey-client:$jerseyVersion"
        testCompile "com.sun.jersey:jersey-test-framework:$jerseyVersion"
    }

    idea {
        module {
            inheritOutputDirs = false
            print project.name + " output dir: " + sourceSets.main.output.resourcesDir
            outputDir = file("out")
            testOutputDir = file("out")

            excludeDirs += file("out")
        }
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                repository(url: uri('../repository'))
            }
        }
    }

    // In default we use port 8051 when we run webapp with "gradle clean jettyRun"
    httpPort = 8051
}
